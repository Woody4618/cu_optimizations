/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import { getU8Encoder } from '@solana/codecs';
import { Program, ProgramWithErrors } from '@solana/programs';
import {
  ComputeOptimizationsProgramError,
  ComputeOptimizationsProgramErrorCode,
  getComputeOptimizationsProgramErrorFromCode,
} from '../errors';
import {
  ParsedCreateInstruction,
  ParsedIncrementInstruction,
} from '../instructions';
import { memcmp } from '../shared';
import { Key, getKeyEncoder } from '../types';

export const COMPUTE_OPTIMIZATIONS_PROGRAM_ADDRESS =
  'ABVG8jqgAD37qvGyisv6gkEnMRwsUbQSMgcDpCuvWvt5' as Address<'ABVG8jqgAD37qvGyisv6gkEnMRwsUbQSMgcDpCuvWvt5'>;

export type ComputeOptimizationsProgram =
  Program<'ABVG8jqgAD37qvGyisv6gkEnMRwsUbQSMgcDpCuvWvt5'> &
    ProgramWithErrors<
      ComputeOptimizationsProgramErrorCode,
      ComputeOptimizationsProgramError
    >;

export function getComputeOptimizationsProgram(): ComputeOptimizationsProgram {
  return {
    name: 'computeOptimizations',
    address: COMPUTE_OPTIMIZATIONS_PROGRAM_ADDRESS,
    getErrorFromCode(
      code: ComputeOptimizationsProgramErrorCode,
      cause?: Error
    ) {
      return getComputeOptimizationsProgramErrorFromCode(code, cause);
    },
  };
}

export enum ComputeOptimizationsAccount {
  Counter,
}

export function identifyComputeOptimizationsAccount(
  account: { data: Uint8Array } | Uint8Array
): ComputeOptimizationsAccount {
  const data = account instanceof Uint8Array ? account : account.data;
  if (memcmp(data, getKeyEncoder().encode(Key.Counter), 0)) {
    return ComputeOptimizationsAccount.Counter;
  }
  throw new Error(
    'The provided account could not be identified as a computeOptimizations account.'
  );
}

export enum ComputeOptimizationsInstruction {
  Create,
  Increment,
}

export function identifyComputeOptimizationsInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): ComputeOptimizationsInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (memcmp(data, getU8Encoder().encode(0), 0)) {
    return ComputeOptimizationsInstruction.Create;
  }
  if (memcmp(data, getU8Encoder().encode(1), 0)) {
    return ComputeOptimizationsInstruction.Increment;
  }
  throw new Error(
    'The provided instruction could not be identified as a computeOptimizations instruction.'
  );
}

export type ParsedComputeOptimizationsInstruction<
  TProgram extends string = 'ABVG8jqgAD37qvGyisv6gkEnMRwsUbQSMgcDpCuvWvt5'
> =
  | ({
      instructionType: ComputeOptimizationsInstruction.Create;
    } & ParsedCreateInstruction<TProgram>)
  | ({
      instructionType: ComputeOptimizationsInstruction.Increment;
    } & ParsedIncrementInstruction<TProgram>);
